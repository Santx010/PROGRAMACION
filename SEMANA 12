class Libro:
    def __init__(self, titulo, autor, categoria, isbn):
        self.info = (titulo, autor)  # Tupla inmutable
        self.categoria = categoria
        self.isbn = isbn

    def __str__(self):
        return f"{self.info[0]} por {self.info[1]} (Categoría: {self.categoria}, ISBN: {self.isbn})"


class Usuario:
    def __init__(self, nombre, user_id):
        self.nombre = nombre
        self.user_id = user_id
        self.libros_prestados = []  # Lista de libros prestados

    def __str__(self):
        return f"Usuario: {self.nombre} (ID: {self.user_id}) - Libros Prestados: {len(self.libros_prestados)}"


class Biblioteca:
    def __init__(self):
        self.libros_disponibles = {}  # Diccionario {ISBN: Libro}
        self.usuarios = set()  # Conjunto de IDs de usuarios únicos
        self.historial_prestamos = []

    def agregar_libro(self, libro):
        if libro.isbn not in self.libros_disponibles:
            self.libros_disponibles[libro.isbn] = libro
            print(f"Libro agregado: {libro}")
        else:
            print("El libro ya está registrado.")

    def eliminar_libro(self, isbn):
        if isbn in self.libros_disponibles:
            del self.libros_disponibles[isbn]
            print("Libro eliminado.")
        else:
            print("El libro no existe en la biblioteca.")

    def registrar_usuario(self, usuario):
        if usuario.user_id not in self.usuarios:
            self.usuarios.add(usuario.user_id)
            print(f"Usuario registrado: {usuario.nombre}")
        else:
            print("El usuario ya está registrado.")

    def dar_de_baja_usuario(self, user_id):
        if user_id in self.usuarios:
            self.usuarios.remove(user_id)
            print("Usuario eliminado.")
        else:
            print("El usuario no está registrado.")

    def prestar_libro(self, usuario, isbn):
        if isbn in self.libros_disponibles and usuario.user_id in self.usuarios:
            libro = self.libros_disponibles.pop(isbn)
            usuario.libros_prestados.append(libro)
            self.historial_prestamos.append((usuario.user_id, libro.isbn))
            print(f"Libro prestado: {libro} a {usuario.nombre}")
        else:
            print("Libro no disponible o usuario no registrado.")

    def devolver_libro(self, usuario, isbn):
        for libro in usuario.libros_prestados:
            if libro.isbn == isbn:
                usuario.libros_prestados.remove(libro)
                self.libros_disponibles[isbn] = libro
                print(f"Libro devuelto: {libro}")
                return
        print("El usuario no tiene este libro prestado.")

    def buscar_libro(self, **kwargs):
        resultados = []
        for libro in self.libros_disponibles.values():
            if any(getattr(libro, key) == value for key, value in kwargs.items()):
                resultados.append(libro)
        return resultados

    def listar_libros_prestados(self, usuario):
        if usuario.libros_prestados:
            print(f"Libros prestados a {usuario.nombre}:")
            for libro in usuario.libros_prestados:
                print(libro)
        else:
            print("No tiene libros prestados.")


# Pruebas del sistema
biblio = Biblioteca()
libro1 = Libro("1984", "George Orwell", "Ficción", "123456")
libro2 = Libro("Cien años de soledad", "Gabriel García Márquez", "Realismo mágico", "789101")
usuario1 = Usuario("Santiago", "U001")

biblio.agregar_libro(libro1)
biblio.agregar_libro(libro2)
biblio.registrar_usuario(usuario1)
biblio.prestar_libro(usuario1, "123456")
biblio.listar_libros_prestados(usuario1)
biblio.devolver_libro(usuario1, "123456")
biblio.listar_libros_prestados(usuario1)
